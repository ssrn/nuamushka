@mixin font-face($font-family, $name, $weight: normal, $style: normal) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;
    src: url('../fonts/' + $name + '.eot');
    src: url('../fonts/' + $name + '.eot?#iefix') format('embedded-opentype'), url('../fonts/' + $name + '.woff2') format("woff2"), url('../fonts/' + $name + '.woff') format('woff'), url('../fonts/' + $name + '.ttf') format('truetype');
  }
}


@mixin product-card-gradient($from, $color) {
  background-image: linear-gradient(135deg, transparent $from, $color 30px);
}


/// Usage:
/// Use vars from $color-stack.
/// a {
///   color: color(base);
///   background: color(base, hover);
///   border-color: color(orange, hover, 0.4);
/// }

@function color($group, $shade: normal, $transparency:1) {
  @each $color in $color-stack {
    $c-group: map-get($color, group);
    $c-shade: map-get($color, id);
    @if($group == map-get($color, group) and $shade == map-get($color, id)) {
      @return rgba(map-get($color, color), $transparency);
    }
  }
}


/// Usage:
/// Use vars from $media-stack or custom.
/// h1{
///   color: #333;
///   @include media(tablet){
///     font-size: 1rem;
///   };
///   @include media(small, inbetween){
///     font-size: 1.2rem;
///   };
///   @include media(small){
///     color: #000;
///   };

@mixin media($group, $id: general) {
  @each $media in $media-stack {
    @if($group == map-get($media, group) and $id == map-get($media, id)) {
      $rule: map-get($media, rule);
      @media #{$rule} {
        @content
      }
    }
  }
}

@mixin mq-max($width) {
  @media only screen and (max-width: $width){
    @content;
  }
}

@mixin mq-min($width) {
  @media only screen and (min-width: $width){
    @content;
  }
}

// Aspect ratio
@mixin aspect-ratio($width, $height) {
  padding-top: ($height / $width) * 100%;
}


